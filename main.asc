load("global/secure.asc");
load("global/code.asc");
load("global/log.asc");
//所有客户端
var clients = application.clients;
//正在直播的流
var streams = [];
//定义server的命名空间
Client.prototype.app = {};
/**
 * 拓展创建直播流的原型
 * @param {Object} stream 流名
 * @param {Object} res 播放对应资源
 */
Client.prototype.app.createStream = function(stream, res, args) {
	var returnData = {};
	var streamName;
	var resName;
	var interval;
	if(res.format == "mp4") {
		streamName = "mp4:" + stream.name + ".mp4";
		resName = "mp4:" + res.src + ".mp4";
	} else if(res.format == "flv") {
		streamName = stream.name;
		resName = res.src;
	} else {
		returnData.b = 0;
		returnData.i = error_format;
		returnData.msg = "error_format";
		return returnData;
	}
	var s = Stream.get(streamName);
	if(s) {
		if(args) {
			var is = s.play(resName, args.startTime, args.len);
			logger.log("stream play return : " + is);
			interval = setInterval(function() {
				s.play(resName, args.startTime, args.len);
			}, (args.len - 1) * 1000);
		} else {
			s.play(resName);
		}
	}
	var stream = {
		"name" : stream.name,
		"s" : s,
		"interval" : interval
	}
	var index = streams.length;
	streams.push(stream);
	returnData.b = 1;
	returnData.o = {
		"index": index
	};
	logger.log("create stream : " + streamName + ",args : " + args.startTime + " | " + args.len);
	return returnData;
};

Client.prototype.app.closeStream = function(index){
	var stream = streams[index];
	if(stream){
		clearInterval(stream.interval);
		Stream.destroy(stream.s);
		streams.splice(index);
	}
}


application.onAppStart = function() {
	logger.log("当前版本为 : " + version);
	setInterval(function() {
		logger.log("当前连接数为 : " + clients.length);
	}, 10000);
}

application.onAppStop = function() {
	logger.log("App stopped.");
}

application.onConnect = function(client) {
	logger.log("ip : " + client.ip);
	return true;
}

application.onPublish = function(client, stream) {
	logger.log("name : " + stream.name);
}