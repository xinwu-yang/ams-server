load("global/secure.asc");
load("global/code.asc");
load("global/log.asc");
//所有客户端
var clients = application.clients;
//正在直播的流
var streams = [];
//定义server的命名空间
Client.prototype.app = {};
/**
 * 拓展创建直播流的原型
 * @param {Object} stream 流名
 * @param {Object} res 播放对应资源
 */
Client.prototype.app.createStream = function(stream, res, args) {
	logger.log("create stream...");
	logger.log("args.startTime : " + args.startTime);
	logger.log("args.len : " + args.len);
	var returnData = {};
	var streamName;
	var resName;
	var interval;
	var index;
	var tmpStream;
	var exist = false;
	if(res.format == "mp4") {
		streamName = "mp4:" + stream.name + ".mp4";
		resName = "mp4:" + res.src + ".mp4";
	} else if(res.format == "flv") {
		streamName = stream.name;
		resName = res.src;
	} else {
		returnData.b = 0;
		returnData.i = error_format;
		returnData.msg = "error_format";
		return returnData;
	}
	for(var i = 0; i < streams.length; i++) {
		if(stream.name == streams[i].name) {
			tmpStream = streams[i];
			exist = true;
			index = i;
			clearInterval(streams[i].interval);
		}
	}
	var s = Stream.get(streamName);
	s.play(resName, args.startTime, args.len);
	logger.log("streamName : " + streamName);
	logger.log("resName : " + resName);
	if(args.len > 1) {
		interval = setInterval(function() {
			s.play(resName, args.startTime, args.len);
		}, (args.len - 1) * 1000);
	}
	logger.log(s);
	if(!exist) {
		tmpStream = {
			"name": stream.name,
			"s": s,
			"interval": interval,
			"resName": resName,
			"args": args
		}
		index = streams.length;
		streams.push(stream);
	} else {
		tmpStream.interval = interval;
		tmpStream.resName = resName;
		tmpStream.args = args;
		tmpStream.s = s;
	}
	returnData.b = 1;
	returnData.o = {
		"index": index
	};
	logger.log("create stream : " + streamName + ",args : " + args.startTime + " | " + args.len);
	return returnData;
};
/**
 * 关闭直播流
 * @param {Object} index
 */
Client.prototype.app.closeStream = function(index) {
		trace("close index : " + index);
		var stream = streams[index];
		if(stream) {
			logger.log("closed : " + stream.name);
			logger.log(stream.s);
			Stream.destroy(stream.s);
			streams.splice(index,1);
			clearInterval(stream.interval);
		}
		return "success";
	}
	/**
	 * 关闭直播循环
	 * @param {Object} index
	 */
Client.prototype.app.loopOff = function(index) {
	var stream = streams[index];
	if(stream) {
		clearInterval(stream.interval);
		stream.s.play(stream.resName, stream.args.startTime + stream.args.len);
	}
}

application.onAppStart = function() {
	logger.log("当前版本为 : " + version);
	setInterval(function() {
		logger.log("当前连接数为 : " + clients.length);
	}, 10000);
}

application.onAppStop = function() {
	logger.log("App stopped.");
}

application.onConnect = function(client) {
	logger.log("ip : " + client.ip);
	return true;
}

application.onPublish = function(client, stream) {
	logger.log("name : " + stream.name);
}